name: TechUnity Frontend CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: techunity-cluster
  ECS_SERVICE: techunity-fe-service
  ECR_REPOSITORY: techunity-fe
  ECS_TASK_DEFINITION_FE: .aws/task-def-fe.json

permissions:
  id-token: write
  contents: read

jobs:
  # Build
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v4
      - name: Build an Image
        run: |
          docker image build \
            --build-arg NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }} \
            --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} \
            -t temp_techunity-fe-image:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag temp_techunity-fe-image:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:${{github.sha}} > fe-image-uri.txt

      - name: Upload the image uri file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-image-uri
          path: fe-image-uri.txt

  # Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-image-uri
          path: artifacts

      - name: Define the image URI
        run: |
          echo "FE_IMAGE_URI=$(cat artifacts/fe-image-uri.txt)" >> $GITHUB_ENV

      - name: Update ECS Service with Health Check Grace Period
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --health-check-grace-period-seconds 10

      - name: Fill in the new image URI in the amazon ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FE }}
          container-name: fe
          image: ${{ env.FE_IMAGE_URI }}
          environment-variables: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            AUTH_GITHUB_CLIENT_ID=${{ secrets.AUTH_GITHUB_CLIENT_ID }}
            AUTH_GITHUB_SECRET=${{ secrets.AUTH_GITHUB_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=${{ secrets.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME }}
            NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=${{ secrets.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET }}
            CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}
            NEXT_PUBLIC_CLOUDINARY_API_KEY=${{ secrets.NEXT_PUBLIC_CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}

      - name: Deploy ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Update ECS Service with Load Balancer
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --load-balancers '[{"targetGroupArn":"arn:aws:elasticloadbalancing:ap-northeast-1:615299732848:targetgroup/techunity-tg-2/6a4f91498a0ebae5","containerName":"fe","containerPort":3000},{"targetGroupArn":"arn:aws:elasticloadbalancing:ap-northeast-1:615299732848:targetgroup/techunity-tg-3/558c0c5e0f9b9f24","containerName":"fe","containerPort":3000}]'
